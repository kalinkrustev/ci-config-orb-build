executor: machine
shell: "/bin/bash -eo pipefail"
environment:
  MAIN_BRANCH_NAME: main
steps:
  - checkout
  - run:
      name: Setup for SNAPSHOT release
      command: |
        echo "export RELEASE_TAG=$RELEASE_TAG_SNAPSHOT" >> $BASH_ENV
        echo "RELEASE_TAG=$RELEASE_TAG_SNAPSHOT"

        PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
        echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
        echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
  - run:
      name: Setup Slack config
      command: |
        echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
        echo "export SLACK_RELEASE_TYPE='Docker Release'" >> $BASH_ENV
        echo "export SLACK_RELEASE_TAG=v${CIRCLE_TAG:1}" >> $BASH_ENV
        echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
        echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
  - attach_workspace:
      at: /tmp
  - run:
      name: Load the pre-built docker image from workspace
      command: |
        docker load -i /tmp/docker-image.tar
  - run:
      name: Login to Docker Hub
      command: docker login -u $DOCKER_USER -p $DOCKER_PASS
  - run:
      name: Re-tag pre built image
      command: |
        docker tag ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:local ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
        docker tag ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:local ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
  - run:
      name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
      command: |
        echo "Publishing ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
        docker push ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
        echo "Publishing ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG"
        docker push ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
  - run:
      name: Set Image Digest
      command: |
        IMAGE_DIGEST=$(docker inspect ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:v${CIRCLE_TAG:1} | jq '.[0].RepoDigests | .[]')
        echo "IMAGE_DIGEST=${IMAGE_DIGEST}"
        echo "export IMAGE_DIGEST=${IMAGE_DIGEST}" >> $BASH_ENV
  - run:
      name: Update Slack config
      command: |
        echo "export SLACK_RELEASE_URL='https://hub.docker.com/layers/${CIRCLE_PROJECT_REPONAME}/${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}/v${CIRCLE_TAG:1}/images/${IMAGE_DIGEST}?context=explore'" | sed -r "s/${DOCKER_ORG}\/${CIRCLE_PROJECT_REPONAME}@sha256:/sha256-/g" >> $BASH_ENV
  - slack/notify:
      event: pass
      template: SLACK_TEMP_RELEASE_SUCCESS
  - slack/notify:
      event: fail
      template: SLACK_TEMP_RELEASE_FAILURE

publish-npm:
  executor: docker
  environment:
    MAIN_BRANCH_NAME: main
  steps:
    - docker-dependencies
    - checkout
    - restore-cache
    - run:
        name: Setup for LATEST release
        command: |
          echo "export RELEASE_TAG=$RELEASE_TAG_PROD" >> $BASH_ENV
          echo "RELEASE_TAG=$RELEASE_TAG_PROD"
          PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
          echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
    - run:
        name: Setup Slack config
        command: |
          echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
          echo "export SLACK_RELEASE_TYPE='NPM Release'" >> $BASH_ENV
          echo "export SLACK_RELEASE_TAG=v${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_RELEASE_URL=https://www.npmjs.com/package/@mojaloop/${CIRCLE_PROJECT_REPONAME}/v/${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
          echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
    - npm-auth
    - npm-publish
    - slack/notify:
        event: pass
        template: SLACK_TEMP_RELEASE_SUCCESS
    - slack/notify:
        event: fail
        template: SLACK_TEMP_RELEASE_FAILURE

publish-npm-snapshot:
  executor: docker
  environment:
    MAIN_BRANCH_NAME: main
  steps:
    - docker-dependencies
    - checkout
    - restore-cache
    - run:
        name: Setup for SNAPSHOT release
        command: |
          echo "export RELEASE_TAG=${RELEASE_TAG_SNAPSHOT}" >> $BASH_ENV
          echo "RELEASE_TAG=${RELEASE_TAG_SNAPSHOT}"
          echo "Override package version: ${CIRCLE_TAG:1}"
          npx standard-version --skip.tag --skip.commit --skip.changelog --release-as ${CIRCLE_TAG:1}
          PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
          echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
    - run:
        name: Setup Slack config
        command: |
          echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
          echo "export SLACK_RELEASE_TYPE='NPM Snapshot'" >> $BASH_ENV
          echo "export SLACK_RELEASE_TAG=v${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_RELEASE_URL=https://www.npmjs.com/package/@mojaloop/${CIRCLE_PROJECT_REPONAME}/v/${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
          echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
    - npm-auth
    - npm-publish
    - slack/notify:
        event: pass
        template: SLACK_TEMP_RELEASE_SUCCESS
    - slack/notify:
        event: fail
        template: SLACK_TEMP_RELEASE_FAILURE
publish-npm-prerelease:
  executor: machine
  environment:
    MAIN_BRANCH_NAME: main
  steps:
    - run:
        name: Install git
        command: |
          sudo apt-get update && sudo apt-get install -y git
    - gh/install
    - checkout
    - restore-cache
    - configure-git
    - run:
        name: Setup for pre-release
        command: |
          if [[ $CIRCLE_BRANCH =~ ^(major|minor|patch)/(.*)$ ]]; then
            echo "export RELEASE_TAG=${BASH_REMATCH[1]}-${BASH_REMATCH[2]}" >> $BASH_ENV
            echo "RELEASE_TAG=${BASH_REMATCH[1]}-${BASH_REMATCH[2]}"
            echo "Pre-releasing ${BASH_REMATCH[1]} version ${BASH_REMATCH[2]}"
            npx standard-version --prerelease "${BASH_REMATCH[2]}" --release-as "${BASH_REMATCH[1]}" --message "chore(release): [ci skip] %s" --skip.changelog --no-verify

            PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
            echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
            echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
          else
            echo "unsupported branch $CIRCLE_BRANCH for pre-release"
            exit 1
          fi
    - run:
        name: Push the pre-release
        command: git push --follow-tags origin ${CIRCLE_BRANCH}
    - run:
        name: Setup Slack config
        command: |
          echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
          echo "export SLACK_RELEASE_TYPE='NPM pre-release'" >> $BASH_ENV
          echo "export SLACK_RELEASE_TAG=v${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_RELEASE_URL=https://www.npmjs.com/package/@mojaloop/${CIRCLE_PROJECT_REPONAME}/v/${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
          echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
    - npm-auth
    - npm-publish
    - slack/notify:
        event: pass
        template: SLACK_TEMP_RELEASE_SUCCESS
    - slack/notify:
        event: fail
        template: SLACK_TEMP_RELEASE_FAILURE
