executor: machine
environment:
  MAIN_BRANCH_NAME: main
steps:
  - machine-dependencies
  - checkout
  - configure-nvm
  - display-versions
  - restore-cache
  - attach_workspace:
      at: /tmp
  - run:
      name: Create dir for test results
      command: mkdir -p ./test/results
  - run:
      name: Execute integration tests
      command: |
        # Set Node version to default (Note: this is needed on Ubuntu)
        nvm use default
        npm ci

        echo "Running integration tests...."
        bash ./test/scripts/test-integration.sh
      environment:
        ENDPOINT_URL: http://localhost:4545/notification
        UV_THREADPOOL_SIZE: 12
        WAIT_FOR_REBALANCE: 20
        TEST_INT_RETRY_COUNT: 30
        TEST_INT_RETRY_DELAY: 2
        TEST_INT_REBALANCE_DELAY: 20000
  - store_artifacts:
      path: ./test/results
      destination: test
  - store_test_results:
      path: ./test/results

test-functional:
  executor: machine
  environment:
    ML_CORE_TEST_HARNESS_DIR: /tmp/ml-core-test-harness
  steps:
    - checkout
    - attach_workspace:
        at: /tmp
    - run:
        name: Load the pre-built docker image from workspace
        command: docker load -i /tmp/docker-image.tar
    - run:
        name: Execute TTK functional tests
        command: bash ./test/scripts/test-functional.sh
    - store_artifacts:
        path: /tmp/ml-core-test-harness/reports
        destination: test

vulnerability-check:
  executor: docker
  environment:
    MAIN_BRANCH_NAME: main
  steps:
    - docker-dependencies
    - checkout
    - configure-nvm
    - display-versions
    - restore-cache
    - run:
        name: Create dir for test results
        command: mkdir -p ./audit/results
    - run:
        name: Check for new npm vulnerabilities
        command: npm run audit:check -- -o json > ./audit/results/auditResults.json
    - store_artifacts:
        path: ./audit/results
        destination: audit

audit-licenses:
  executor: docker
  environment:
    MAIN_BRANCH_NAME: main
  steps:
    - docker-dependencies
    - license-scanner
    - checkout
    - restore-cache
    - run:
        name: Run the license-scanner
        command: cd /tmp/license-scanner && pathToRepo=$CIRCLE_WORKING_DIRECTORY make run
    - store_artifacts:
        path: /tmp/license-scanner/results
        destination: licenses

license-scan:
  executor: machine
  environment:
    MAIN_BRANCH_NAME: main
  steps:
    - attach_workspace:
        at: /tmp
    - run:
        name: Load the pre-built docker image from workspace
        command: docker load -i /tmp/docker-image.tar
    - license-scanner
    - run:
        name: Run the license-scanner
        command: cd /tmp/license-scanner && mode=docker dockerImages=${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:local make run
    - store_artifacts:
        path: /tmp/license-scanner/results
        destination: licenses

image-scan:
  executor: anchore/anchore_engine
  shell: /bin/sh -leo pipefail ## Ref: https://circleci.com/docs/env-vars/#alpine-linux
  environment:
    MAIN_BRANCH_NAME: main
    BASH_ENV: /etc/profile ## Ref: https://circleci.com/docs/env-vars/#alpine-linux
    ENV: ~/.profile
    NVM_ARCH_UNOFFICIAL_OVERRIDE: x64-musl ## Ref: https://github.com/nvm-sh/nvm/issues/1102#issuecomment-550572252
  working_directory: /home/circleci/project
  steps:
    - setup_remote_docker
    - attach_workspace:
        at: /tmp
    - run:
        name: Install docker dependencies for anchore
        command: |
          apk add --update py-pip docker python3-dev libffi-dev openssl-dev gcc libc-dev make jq curl bash
    - aws-dependencies
    - checkout
    - run:
        name: Setup Slack config
        command: |
          echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
          echo "export SLACK_RELEASE_TYPE='GitHub Release'" >> $BASH_ENV
          echo "export SLACK_RELEASE_TAG='${RELEASE_TAG} on ${CIRCLE_BRANCH} branch'" >> $BASH_ENV
          echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
          echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
          echo "export SLACK_CUSTOM_MSG='Anchore Image Scan failed for: \`${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}\`'" >> $BASH_ENV
    - configure-nvm
    - display-versions
    - docker-dependencies
    - run:
        name: Load the pre-built docker image from workspace
        command: docker load -i /tmp/docker-image.tar
    - run:
        name: Download the mojaloop/ci-config repo
        command: |
          git clone https://github.com/mojaloop/ci-config /tmp/ci-config
          # Generate the mojaloop anchore-policy
          cd /tmp/ci-config/container-scanning && ./mojaloop-policy-generator.js /tmp/mojaloop-policy.json
    - run:
        name: Pull base image locally
        command: |
          echo "Pulling docker image: node:$NVMRC_VERSION-alpine"
          docker pull node:$NVMRC_VERSION-alpine
    ## Analyze the base and derived image
    ## Note: It seems images are scanned in parallel, so preloading the base image result doesn't give us any real performance gain
    - anchore/analyze_local_image:
        # Force the older version, version 0.7.0 was just published, and is broken
        anchore_version: v0.6.1
        image_name: "docker.io/node:$NVMRC_VERSION-alpine ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:local"
        policy_failure: false
        timeout: '500'
        # Note: if the generated policy is invalid, this will fallback to the default policy, which we don't want!
        policy_bundle_file_path: /tmp/mojaloop-policy.json
    - run:
        name: Upload Anchore reports to s3
        command: |
          aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/${CIRCLE_PROJECT_REPONAME}/ --recursive
          aws s3 rm ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive --exclude "*" --include "${CIRCLE_PROJECT_REPONAME}*"
          aws s3 cp anchore-reports ${AWS_S3_DIR_ANCHORE_REPORTS}/latest/ --recursive
    - run:
        name: Evaluate failures
        command: /tmp/ci-config/container-scanning/anchore-result-diff.js anchore-reports/node_${NVMRC_VERSION}-alpine-policy.json anchore-reports/${CIRCLE_PROJECT_REPONAME}*-policy.json
    - store_artifacts:
        path: anchore-reports
    - slack/notify:
        event: fail
        template: SLACK_TEMP_RELEASE_FAILURE

release:
  executor: docker
  environment:
    MAIN_BRANCH_NAME: main
  steps:
    - docker-dependencies
    - checkout
    - restore-cache
    - configure-git
    - run:
        name: Setup Slack config
        command: |
          echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
          echo "export SLACK_RELEASE_TYPE='GitHub Release'" >> $BASH_ENV
          echo "export SLACK_RELEASE_TAG='${RELEASE_TAG} on ${CIRCLE_BRANCH} branch'" >> $BASH_ENV
          echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
          echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
    - run:
        name: Generate changelog and bump package version
        command: npm run release -- --no-verify
    - run:
        name: Push the release
        command: git push --follow-tags origin ${CIRCLE_BRANCH}
    - slack/notify:
        event: fail
        template: SLACK_TEMP_RELEASE_FAILURE

github-release:
  executor: machine
  shell: "/bin/bash -eo pipefail"
  environment:
    MAIN_BRANCH_NAME: main
  steps:
    - run:
        name: Install git
        command: |
          sudo apt-get update && sudo apt-get install -y git
    - gh/install
    - checkout
    - configure-git
    - run:
        name: Fetch updated release branch
        command: |
          git fetch origin
          git checkout origin/${CIRCLE_BRANCH}
    - export-version-from-package
    - run:
        name: Check the release changes
        command: |
          echo "Changes are: ${RELEASE_CHANGES}"
    - run:
        name: Setup Slack config
        command: |
          echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
          echo "export SLACK_RELEASE_TYPE='Github Release'" >> $BASH_ENV
          echo "export SLACK_RELEASE_TAG=v${RELEASE_TAG}" >> $BASH_ENV
          echo "export SLACK_RELEASE_URL=https://github.com/mojaloop/${CIRCLE_PROJECT_REPONAME}/releases/tag/v${RELEASE_TAG}" >> $BASH_ENV
          echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
          echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
    - run:
        name: Create Release
        command: |
          gh release create "v${RELEASE_TAG}" --title "v${RELEASE_TAG} Release" --draft=false --notes "${RELEASE_CHANGES}" ./CHANGELOG.md
    - slack/notify:
        event: pass
        template: SLACK_TEMP_RELEASE_SUCCESS
    - slack/notify:
        event: fail
        template: SLACK_TEMP_RELEASE_FAILURE

publish-docker:
  executor: machine
  shell: "/bin/bash -eo pipefail"
  environment:
    MAIN_BRANCH_NAME: main
  steps:
    - checkout
    - run:
        name: Setup for LATEST release
        command: |
          echo "export RELEASE_TAG=$RELEASE_TAG_PROD" >> $BASH_ENV
          echo "RELEASE_TAG=$RELEASE_TAG_PROD"

          PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
          echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
    - run:
        name: Setup Slack config
        command: |
          echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
          echo "export SLACK_RELEASE_TYPE='Docker Release'" >> $BASH_ENV
          echo "export SLACK_RELEASE_TAG=v${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
          echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
    - attach_workspace:
        at: /tmp
    - run:
        name: Load the pre-built docker image from workspace
        command: |
          docker load -i /tmp/docker-image.tar
    - run:
        name: Login to Docker Hub
        command: docker login -u $DOCKER_USER -p $DOCKER_PASS
    - run:
        name: Re-tag pre built image
        command: |
          docker tag ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:local ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
          docker tag ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:local ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
    - run:
        name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
        command: |
          echo "Publishing ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
          docker push ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
          echo "Publishing ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG"
          docker push ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
    - run:
        name: Set Image Digest
        command: |
          IMAGE_DIGEST=$(docker inspect ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:v${CIRCLE_TAG:1} | jq '.[0].RepoDigests | .[]')
          echo "IMAGE_DIGEST=${IMAGE_DIGEST}"
          echo "export IMAGE_DIGEST=${IMAGE_DIGEST}" >> $BASH_ENV
    - run:
        name: Update Slack config
        command: |
          echo "export SLACK_RELEASE_URL='https://hub.docker.com/layers/${CIRCLE_PROJECT_REPONAME}/${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}/v${CIRCLE_TAG:1}/images/${IMAGE_DIGEST}?context=explore'" | sed -r "s/${DOCKER_ORG}\/${CIRCLE_PROJECT_REPONAME}@sha256:/sha256-/g" >> $BASH_ENV
    - slack/notify:
        event: pass
        template: SLACK_TEMP_RELEASE_SUCCESS
    - slack/notify:
        event: fail
        template: SLACK_TEMP_RELEASE_FAILURE

publish-docker-snapshot:
  executor: machine
  shell: "/bin/bash -eo pipefail"
  environment:
    MAIN_BRANCH_NAME: main
  steps:
    - checkout
    - run:
        name: Setup for SNAPSHOT release
        command: |
          echo "export RELEASE_TAG=$RELEASE_TAG_SNAPSHOT" >> $BASH_ENV
          echo "RELEASE_TAG=$RELEASE_TAG_SNAPSHOT"

          PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
          echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
    - run:
        name: Setup Slack config
        command: |
          echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
          echo "export SLACK_RELEASE_TYPE='Docker Release'" >> $BASH_ENV
          echo "export SLACK_RELEASE_TAG=v${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
          echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
    - attach_workspace:
        at: /tmp
    - run:
        name: Load the pre-built docker image from workspace
        command: |
          docker load -i /tmp/docker-image.tar
    - run:
        name: Login to Docker Hub
        command: docker login -u $DOCKER_USER -p $DOCKER_PASS
    - run:
        name: Re-tag pre built image
        command: |
          docker tag ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:local ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
          docker tag ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:local ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
    - run:
        name: Publish Docker image $CIRCLE_TAG & Latest tag to Docker Hub
        command: |
          echo "Publishing ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG"
          docker push ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$CIRCLE_TAG
          echo "Publishing ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG"
          docker push ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:$RELEASE_TAG
    - run:
        name: Set Image Digest
        command: |
          IMAGE_DIGEST=$(docker inspect ${DOCKER_ORG:-mojaloop}/$CIRCLE_PROJECT_REPONAME:v${CIRCLE_TAG:1} | jq '.[0].RepoDigests | .[]')
          echo "IMAGE_DIGEST=${IMAGE_DIGEST}"
          echo "export IMAGE_DIGEST=${IMAGE_DIGEST}" >> $BASH_ENV
    - run:
        name: Update Slack config
        command: |
          echo "export SLACK_RELEASE_URL='https://hub.docker.com/layers/${CIRCLE_PROJECT_REPONAME}/${DOCKER_ORG}/${CIRCLE_PROJECT_REPONAME}/v${CIRCLE_TAG:1}/images/${IMAGE_DIGEST}?context=explore'" | sed -r "s/${DOCKER_ORG}\/${CIRCLE_PROJECT_REPONAME}@sha256:/sha256-/g" >> $BASH_ENV
    - slack/notify:
        event: pass
        template: SLACK_TEMP_RELEASE_SUCCESS
    - slack/notify:
        event: fail
        template: SLACK_TEMP_RELEASE_FAILURE

publish-npm:
  executor: docker
  environment:
    MAIN_BRANCH_NAME: main
  steps:
    - docker-dependencies
    - checkout
    - restore-cache
    - run:
        name: Setup for LATEST release
        command: |
          echo "export RELEASE_TAG=$RELEASE_TAG_PROD" >> $BASH_ENV
          echo "RELEASE_TAG=$RELEASE_TAG_PROD"
          PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
          echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
    - run:
        name: Setup Slack config
        command: |
          echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
          echo "export SLACK_RELEASE_TYPE='NPM Release'" >> $BASH_ENV
          echo "export SLACK_RELEASE_TAG=v${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_RELEASE_URL=https://www.npmjs.com/package/@mojaloop/${CIRCLE_PROJECT_REPONAME}/v/${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
          echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
    - npm-auth
    - npm-publish
    - slack/notify:
        event: pass
        template: SLACK_TEMP_RELEASE_SUCCESS
    - slack/notify:
        event: fail
        template: SLACK_TEMP_RELEASE_FAILURE

publish-npm-snapshot:
  executor: docker
  environment:
    MAIN_BRANCH_NAME: main
  steps:
    - docker-dependencies
    - checkout
    - restore-cache
    - run:
        name: Setup for SNAPSHOT release
        command: |
          echo "export RELEASE_TAG=${RELEASE_TAG_SNAPSHOT}" >> $BASH_ENV
          echo "RELEASE_TAG=${RELEASE_TAG_SNAPSHOT}"
          echo "Override package version: ${CIRCLE_TAG:1}"
          npx standard-version --skip.tag --skip.commit --skip.changelog --release-as ${CIRCLE_TAG:1}
          PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
          echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
          echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
    - run:
        name: Setup Slack config
        command: |
          echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
          echo "export SLACK_RELEASE_TYPE='NPM Snapshot'" >> $BASH_ENV
          echo "export SLACK_RELEASE_TAG=v${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_RELEASE_URL=https://www.npmjs.com/package/@mojaloop/${CIRCLE_PROJECT_REPONAME}/v/${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
          echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
    - npm-auth
    - npm-publish
    - slack/notify:
        event: pass
        template: SLACK_TEMP_RELEASE_SUCCESS
    - slack/notify:
        event: fail
        template: SLACK_TEMP_RELEASE_FAILURE
publish-npm-prerelease:
  executor: machine
  environment:
    MAIN_BRANCH_NAME: main
  steps:
    - run:
        name: Install git
        command: |
          sudo apt-get update && sudo apt-get install -y git
    - gh/install
    - checkout
    - restore-cache
    - configure-git
    - run:
        name: Setup for pre-release
        command: |
          if [[ $CIRCLE_BRANCH =~ ^(major|minor|patch)/(.*)$ ]]; then
            echo "export RELEASE_TAG=${BASH_REMATCH[1]}-${BASH_REMATCH[2]}" >> $BASH_ENV
            echo "RELEASE_TAG=${BASH_REMATCH[1]}-${BASH_REMATCH[2]}"
            echo "Pre-releasing ${BASH_REMATCH[1]} version ${BASH_REMATCH[2]}"
            npx standard-version --prerelease "${BASH_REMATCH[2]}" --release-as "${BASH_REMATCH[1]}" --message "chore(release): [ci skip] %s" --skip.changelog --no-verify

            PACKAGE_VERSION=$(cat package-lock.json | jq -r .version)
            echo "export PACKAGE_VERSION=${PACKAGE_VERSION}" >> $BASH_ENV
            echo "PACKAGE_VERSION=${PACKAGE_VERSION}"
          else
            echo "unsupported branch $CIRCLE_BRANCH for pre-release"
            exit 1
          fi
    - run:
        name: Push the pre-release
        command: git push --follow-tags origin ${CIRCLE_BRANCH}
    - run:
        name: Setup Slack config
        command: |
          echo "export SLACK_PROJECT_NAME=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
          echo "export SLACK_RELEASE_TYPE='NPM pre-release'" >> $BASH_ENV
          echo "export SLACK_RELEASE_TAG=v${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_RELEASE_URL=https://www.npmjs.com/package/@mojaloop/${CIRCLE_PROJECT_REPONAME}/v/${CIRCLE_TAG:1}" >> $BASH_ENV
          echo "export SLACK_BUILD_ID=${CIRCLE_BUILD_NUM}" >> $BASH_ENV
          echo "export SLACK_CI_URL=${CIRCLE_BUILD_URL}" >> $BASH_ENV
    - npm-auth
    - npm-publish
    - slack/notify:
        event: pass
        template: SLACK_TEMP_RELEASE_SUCCESS
    - slack/notify:
        event: fail
        template: SLACK_TEMP_RELEASE_FAILURE
